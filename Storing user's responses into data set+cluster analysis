import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import math
import numpy as np
from sklearn.cluster import KMeans
import random  # Import the random module
import pandas as pd

class Questionnaire:
    def __init__(self, questions):
        self.questions = questions
        self.responses = []  # Store user responses as a list of lists
        self.user_numbers = []

    def add_response(self, user_number, responses):
        self.responses.append(responses)
        self.user_numbers.append(user_number)

    def create_dataframe(self):
        # Create a dictionary where keys are question names and values are lists of responses
        data = {question['name']: [] for question in self.questions}

        # Fill in the data dictionary with responses
        for responses in self.responses:
            for i, question in enumerate(self.questions):
                data[question['name']].append(responses[i])

        # Add user number and cluster (if applicable)
        data['UserNumber'] = self.user_numbers
        if hasattr(self, 'clusters'):
            data['Cluster'] = self.clusters

        # Create a Pandas DataFrame
        df = pd.DataFrame(data)
        return df

    def plot_total_scores(self):
        plt.scatter(self.user_numbers, self.total_scores)
        plt.xlabel('User Number')
        plt.ylabel('Total Score')
        plt.title('Total Score Based on User Responses')
        plt.show()

    def cluster_users(self, num_clusters):
        # Use K-Means clustering to group users
        kmeans = KMeans(n_clusters=num_clusters, random_state=0)
        clusters = kmeans.fit_predict(self.responses)
        return clusters

questions = [
    {
        'question': 'На сколько вы оцениваете свой внешний вид?',
        'name': 'appearance'
    },
    {
        'question': 'На сколько вы оцениваете свой чувство юмора?',
        'name': 'humor'
    },
    {
        'question': 'На сколько вы оцениваете свою интеллектуальность?',
        'name': 'intelligence'
    },
    {
        'question': 'На сколько вы оцениваете свою активность?',
        'name': 'activity'
    }
]

questionnaire = Questionnaire(questions)

num_users = int(input("Введите количество пользователей: "))

for i in range(num_users):
    print(f"--- Генерация случайных ответов для пользователя {i+1} ---")
    user_responses = []
    for _ in questionnaire.questions:  # Loop through the questions
        # Generate a random score between 0 and 10
        response = random.randint(0, 10)
        user_responses.append(response)
    questionnaire.add_response(i + 1, user_responses)
    print("Сгенерированные ответы:", user_responses)
    print()

# Calculate distances
distances = {}

for i in range(len(questionnaire.user_numbers)):
    for j in range(i + 1, len(questionnaire.user_numbers)):
        user1_scores = questionnaire.responses[i]
        user2_scores = questionnaire.responses[j]
        distance = math.sqrt(sum((x - y) ** 2 for x, y in zip(user1_scores, user2_scores)))
        distances[(i + 1, j + 1)] = distance
        distances[(j + 1, i + 1)] = distance  # Make it symmetrical

# Create a 3D plot
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# Plot user pairs and distances
user_pairs = list(distances.keys())
x, y = zip(*user_pairs)
z = list(distances.values())

ax.scatter(x, y, z, c='b', marker='o')

# Set axis labels
ax.set_xlabel('User Number X')
ax.set_ylabel('User Number Y')
ax.set_zlabel('Distance')

plt.title('Distance Between Users Based on Scores for Each Question')
plt.show()

# Perform clustering and plot clusters
num_clusters = int(input("Введите количество кластеров для анализа: "))
clusters = questionnaire.cluster_users(num_clusters)

# Plot clustered users
plt.scatter(questionnaire.user_numbers, clusters, c=clusters)
plt.xlabel('User Number')
plt.ylabel('Cluster')
plt.title(f'Clustering of Users into {num_clusters} Clusters')
plt.show()
user_responses_df = questionnaire.create_dataframe()

# Display the DataFrame
print(user_responses_df)
